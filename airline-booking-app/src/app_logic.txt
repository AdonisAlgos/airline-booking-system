  const aircraftLayout = [
  [
    { label: "4A", row: 0, col: 0, status: "empty" },
    { label: "4B", row: 0, col: 1, status: "empty" },
    { label: "4C", row: 0, col: 2, status: "booked" },
    { label: "4E", row: 0, col: 4, status: "empty" },
    { label: "4D", row: 0, col: 3, status: "empty" },
    { label: "4F", row: 0, col: 5, status: "empty" },
  ],
  [
    { label: "5B", row: 1, col: 1, status: "booked" },
    { label: "5A", row: 1, col: 0, status: "empty" },
    { label: "5C", row: 1, col: 2, status: "empty" },
    { label: "5D", row: 1, col: 3, status: "empty" },
    { label: "5E", row: 1, col: 4, status: "empty" },
    { label: "5F", row: 1, col: 5, status: "empty" },
  ],
  [
    { label: "6A", row: 2, col: 0, status: "empty" },
    { label: "6B", row: 2, col: 1, status: "empty" },
    { label: "6C", row: 2, col: 2, status: "empty" },
    { label: "6D", row: 2, col: 3, status: "empty" },
    { label: "6E", row: 2, col: 4, status: "empty" },
    { label: "6F", row: 2, col: 5, status: "empty" },
  ],
  [
    { label: "7A", row: 3, col: 0, status: "empty" },
    { label: "7B", row: 3, col: 1, status: "empty" },
    { label: "7C", row: 3, col: 2, status: "empty" },
    { label: "7D", row: 3, col: 3, status: "empty" },
    { label: "7E", row: 3, col: 4, status: "empty" },
    { label: "7F", row: 3, col: 5, status: "empty" },
  ],
];

const Seat = ({ label, row, col, status }) => (
  <div className={`seat ${label ? "occupied" : ""}`}>{label}</div>
);

const App = () => {
  
  const [selectedSeats, setSelectedSeats] = useState([]);
  const [reccomendedSeating, setRecommendedSeating] = useState([]);

  useEffect(() =>{
         const passenger = 5
          for (let row of aircraftLayout) {
            let consecutiveSeats = { amount: 0, seats: [] };
            for (let seat of row) {
              if (seat["status"] === "booked") {
                break;
              }
              if (seat["status"] === "empty") {
                consecutiveSeats.seats.push(seat);
                consecutiveSeats["amount"] += 1;
              }
              if (consecutiveSeats["amount"] === passenger) {
                setRecommendedSeating(consecutiveSeats.seats);
                break;
              }
            }
            if (consecutiveSeats["amount"] === passenger) {
                setRecommendedSeating(consecutiveSeats.seats);
                break;
              }
          }
    },[]);

  const handleSeatClick = (seat) => {
    setSelectedSeats((prevSelectedSeats) => {
      if (prevSelectedSeats.includes(seat)) {
        return prevSelectedSeats.filter((s) => s !== seat);
      } else {
        return [...prevSelectedSeats, seat];
      }
    });
  };

const handleSeatSelection = () => {
  for (let seat of selectedSeats) {
    let emptyLeftSeats = 0;
    let emptyRightSeats = 0;
    // Check seats to the left
    for (let col = seat.col - 1; col >= 0; col--) {
      if (aircraftLayout[seat.row][col].status === "booked" ) {
        break;
      } else if (selectedSeats.includes(aircraftLayout[seat.row][col])) {
      } else if (aircraftLayout[seat.row][col].status === "empty") {
        emptyLeftSeats += 1;
      }
    }
    // Check seats to the right
    for (let col = seat.col + 1; col < aircraftLayout[seat.row].length; col++) {
      if (aircraftLayout[seat.row][col].status === "booked") {
        break;
      } else if (selectedSeats.includes(aircraftLayout[seat.row][col])) {
      }else if (aircraftLayout[seat.row][col].status === "empty") {
        emptyRightSeats += 1;
      }
    }
    if (emptyLeftSeats === 1 || emptyRightSeats === 1) {
      return True
    }
  }
};

  return (
    <div className="plane">
      {aircraftLayout.map((row, rowIndex) => (
        <div className="row" key={rowIndex}>
          {row.map((seat, seatIndex) => (
            <>
              <button key={seat.label} onClick={() => handleSeatClick(seat)}>
                {console.log(selectedSeats)}
                {console.log(reccomendedSeating)}
                <Seat
                  label={seat.label}
                  row={seat.row}
                  col={seat.col}
                  status={seat.status}
                />
              </button>
              {seatIndex === 2 && <div style={{ width: "2rem" }}></div>}
            </>
          ))}
        </div>
      ))}
      <button onClick={() => handleSeatSelection()}>Submit</button>
    </div>
  );
};